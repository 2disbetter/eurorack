#!/usr/bin/python2.5
#
# Copyright 2012 Olivier Gillet.
#
# Author: Olivier Gillet (ol.gillet@gmail.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
#
# Waveshaper lookup tables.

import numpy

waveshapers = []

def scale(x, min=-32766, max=32766, center=True):
  if center:
    x -= x.mean()
  mx = numpy.abs(x).max()
  x = (x + mx) / (2 * mx)
  x = x * (max - min) + min
  x = numpy.round(x)
  return x.astype(int)


x = ((numpy.arange(0, 257) / 128.0 - 1.0))
x[-1] = x[-2]
violent_overdrive = numpy.tanh(8.0 * x)
overdrive = numpy.tanh(5.0 * x)
slight_overdrive = numpy.tanh(1.75 * x)
moderate_overdrive = numpy.tanh(2.5 * x)

# Wavefolder curves from the first version
# tri_fold = numpy.abs(4.0 * x - numpy.round(4.0 * x)) * numpy.sign(x)
# sine_fold = numpy.sin(5 * numpy.pi * x)

window = numpy.exp(-x * x * 4) ** 1.5
sine = numpy.sin(8 * numpy.pi * x)
sine_fold = sine * window + numpy.arctan(3 * x) * (1 - window)
sine_fold /= numpy.abs(sine_fold).max()

tri_fold = numpy.sin(numpy.pi * (3 * x + (2 * x) ** 3))

# Wavefolder curve sampled from a ÂµFold
# sine_fold = numpy.array(
#       [ -6.18131627e-01,  -6.06226996e-01,  -5.93774647e-01,
#         -5.80719810e-01,  -5.67966217e-01,  -5.55548101e-01,
#         -5.43557204e-01,  -5.31045975e-01,  -5.18589519e-01,
#         -5.06311070e-01,  -4.93958680e-01,  -4.81344755e-01,
#         -4.68232407e-01,  -4.54864002e-01,  -4.41550368e-01,
#         -4.28524286e-01,  -4.14972395e-01,  -4.01187725e-01,
#         -3.87183967e-01,  -3.73488301e-01,  -3.60019937e-01,
#         -3.46993855e-01,  -3.33699391e-01,  -3.20229658e-01,
#         -3.06513452e-01,  -2.92654840e-01,  -2.78708593e-01,
#         -2.64762346e-01,  -2.50125975e-01,  -2.34991182e-01,
#         -2.20239791e-01,  -2.05548648e-01,  -1.90912278e-01,
#         -1.75787069e-01,  -1.60648168e-01,  -1.45494205e-01,
#         -1.30093769e-01,  -1.15851755e-01,  -1.03170734e-01,
#         -9.48865130e-02,  -8.73937429e-02,  -8.04349969e-02,
#         -7.42156691e-02,  -6.77170055e-02,  -6.04131978e-02,
#         -5.31559460e-02,  -4.60082377e-02,  -3.91070020e-02,
#         -3.16142319e-02,  -2.39023749e-02,  -1.60809745e-02,
#         -8.38281045e-03,  -6.13443169e-04,   7.66803961e-03,
#          1.61028832e-02,   2.46883490e-02,   3.37174656e-02,
#          4.25151718e-02,   5.12334589e-02,   6.05501271e-02,
#          7.02611515e-02,   8.02994369e-02,   9.09675971e-02,
#          1.01711068e-01,   1.12523004e-01,   1.23449961e-01,
#          1.34910941e-01,   1.46959348e-01,   1.58733897e-01,
#          1.71209524e-01,   1.84638178e-01,   1.98170899e-01,
#          2.12284199e-01,   2.27323142e-01,   2.43323328e-01,
#          2.60030070e-01,   2.77829507e-01,   2.97304958e-01,
#          3.17930615e-01,   3.40445897e-01,   3.64757690e-01,
#          3.90219689e-01,   4.17565836e-01,   4.48424218e-01,
#          4.81289983e-01,   5.16716326e-01,   5.54538932e-01,
#          5.93871867e-01,   6.35077995e-01,   6.75483086e-01,
#          7.15020046e-01,   7.50992737e-01,   7.82923276e-01,
#          8.11433321e-01,   8.32165783e-01,   8.50774472e-01,
#          8.67452458e-01,   8.77401740e-01,   8.82092937e-01,
#          8.81000241e-01,   8.66954036e-01,   8.42167098e-01,
#          8.03922750e-01,   7.25873061e-01,   6.22688634e-01,
#          4.85469065e-01,   3.19954430e-01,   1.46973041e-01,
#         -3.15101656e-02,  -2.08387192e-01,  -3.79472110e-01,
#         -5.37021569e-01,  -6.69529401e-01,  -7.84277506e-01,
#         -8.67236110e-01,  -9.20330438e-01,  -9.56379809e-01,
#         -9.70757383e-01,  -9.73977960e-01,  -9.70416429e-01,
#         -9.59633249e-01,  -9.44577874e-01,  -9.25986986e-01,
#         -8.98784616e-01,  -8.02553457e-01,  -6.50744074e-01,
#         -4.22802011e-01,  -1.96486669e-01,   2.83498379e-02,
#          2.53243855e-01,   4.61555736e-01,   6.51627268e-01,
#          7.77643283e-01,   8.68649220e-01,   9.17245421e-01,
#          9.28820053e-01,   9.29366401e-01,   9.18324424e-01,
#          8.98039720e-01,   8.70310172e-01,   8.30771843e-01,
#          7.68165038e-01,   6.89425226e-01,   5.83922586e-01,
#          4.51340811e-01,   3.04593703e-01,   1.39596661e-01,
#         -3.53619862e-02,  -2.13773990e-01,  -3.89928030e-01,
#         -5.55116773e-01,  -7.09080054e-01,  -8.28586452e-01,
#         -9.13327874e-01,  -9.72559373e-01,  -9.92687977e-01,
#         -1.00000000e+00,  -9.97251829e-01,  -9.85548484e-01,
#         -9.69160788e-01,  -9.48514591e-01,  -9.15762477e-01,
#         -8.75082158e-01,  -8.25680812e-01,  -7.58560819e-01,
#         -6.87079627e-01,  -6.10964749e-01,  -5.40339366e-01,
#         -4.74651652e-01,  -4.16048659e-01,  -3.66910218e-01,
#         -3.22454759e-01,  -2.84210411e-01,  -2.51971782e-01,
#         -2.22312900e-01,  -1.95570612e-01,  -1.72421348e-01,
#         -1.50819385e-01,  -1.30575760e-01,  -1.11893129e-01,
#         -9.40813689e-02,  -7.73171173e-02,  -6.15305407e-02,
#         -4.62903120e-02,  -3.13951450e-02,  -1.83868636e-02,
#         -6.66845588e-03,   3.82717334e-03,   1.70504338e-02,
#          3.22550609e-02,   4.61725528e-02,   5.92917470e-02,
#          7.16852160e-02,   8.32735409e-02,   9.47386294e-02,
#          1.06068158e-01,   1.16932127e-01,   1.28006967e-01,
#          1.39394006e-01,   1.50182664e-01,   1.60897380e-01,
#          1.71594295e-01,   1.82069385e-01,   1.92354143e-01,
#          2.02332179e-01,   2.12426606e-01,   2.22367672e-01,
#          2.31856871e-01,   2.41324161e-01,   2.50969459e-01,
#          2.61206292e-01,   2.70806404e-01,   2.80157304e-01,
#          2.89531483e-01,   2.98579770e-01,   3.07547268e-01,
#          3.17007712e-01,   3.26129940e-01,   3.35038559e-01,
#          3.43895145e-01,   3.53113224e-01,   3.62566821e-01,
#          3.71308387e-01,   3.80004765e-01,   3.88660065e-01,
#          3.97257854e-01,   4.05759793e-01,   4.14156297e-01,
#          4.22361099e-01,   4.30667229e-01,   4.39121243e-01,
#          4.47341107e-01,   4.55558233e-01,   4.63810961e-01,
#          4.72137630e-01,   4.80323263e-01,   4.88202173e-01,
#          4.96313864e-01,   5.04274932e-01,   5.11722516e-01,
#          5.19520638e-01,   5.27229756e-01,   5.34303523e-01,
#          5.41336211e-01,   5.48390807e-01,   5.55608349e-01,
#          5.62768381e-01,   5.69903766e-01,   5.77063798e-01,
#          5.83885615e-01,   5.90477390e-01,   5.96861033e-01,
#          6.03113224e-01,   6.09253133e-01,   6.15119183e-01,
#          6.17912541e-01,   6.17912541e-01])

waveshapers.append(('moderate_overdrive', scale(moderate_overdrive)))
waveshapers.append(('slight_overdrive', scale(slight_overdrive)))
waveshapers.append(('violent_overdrive', scale(violent_overdrive)))
waveshapers.append(('sine_fold', scale(sine_fold, center=False)))
waveshapers.append(('tri_fold', scale(tri_fold)))
